<?php
/**
 * ACS - Ultimate Script for Import/Export from many formats (csv,html,xml,array,mysql db,pdf etc.)
 * File: ACS.php
 * Author: Pritesh Gupta
 * Version: 1.2
 * Date: 11-Jul-2013
 * Copyright (c) 2013 Pritesh Gupta. All Rights Reserved.
 
 /* ABOUT THIS FILE:
 -------------------------------------------------------------------------
 
 -------------------------------------------------------------------------
 */
//error_reporting(0);

require_once('DBModel.php');
class ACS
{
    /********************* Debugging variables - use these variables to debug application ********************************/
    public $error; // Display any error occured in conversion   
    public $messages = ""; // Display all messages at various steps for processing conversion 
    public $inputDataArray = array(); // Display the input data as array generated by input format
    public $formattedDataArray = array(); // Display the formatted data as array after processing the input data
    
    /********************* File related variables - use this for various file operations *********************************/
    public $fileOutputMode = "save"; // if fileOutputMode="browser", then it will ask for download else it will save
    public $checkFileName = true; // If true then it checks for illegal character in file name
    public $checkFileNameCharacters = true; // If true then it checks for no. of character in file name, should be less than 255
    public $replaceOlderFile = false; // If true then it will replace the older file if present at same location
    public $uploadedFileName = ""; // Name of new uploaded file 
    public $fileUploadPath = ""; // Path of the uploaded file
    public $maxSize = 100000; // Max size of file allowed for file upload
    public $uploadDirectory = "wpaie_files"; // Default path for saving generated file 
    
    public $pdfFontName = "helvetica"; // font name for pdf
    public $pdfFontSize = "8"; // font size for pdf
    public $pdfFontWeight = "B"; // font weight for pdf
    public $pdfAuthorName = "Author Name"; // Author name for pdf
    public $pdfSubject = "PDF Subject Name"; // Subject name for pdf	
    
    public $excelFormat = "2007"; // Set format of excel generate (.xlsx or .xls)
    
    public $columns = array(); // Column names for the database table name
    public $dbTableName;
    public $query;
    
    public $db; // db object	
    public $isFirstRowHeader = false;
    public $delimiter = ","; // Delimiter to be used in handling csv files, default is ','
    public $enclosure = '"'; // Enclosure to be used in handling csv files, default is '"' 
    
    public $isFile = true; // Whether the supplied xml or html source is file or not
    public $useFirstRowAsTag = false;
    public $outputHTML = ""; // Display html table generated  
    public $tableCssClass = "tblCss"; // css class for the html table
    public $trCssClass = "trCss"; // css class for the html table row (tr)   
    public $htmlTableStyle = ""; // css style for the html table
    public $htmlTRStyle = ""; // css style for the html table row (tr)
    public $htmlTDStyle = ""; // css style for the html table col (td)
    
    public $outputXML = ""; // Display xml table generated  
    public $rootElement = "root"; // Root Element for the xml
    public $encoding = "utf-8"; // Encoding for the xml file
    public $rowTagName = ""; // If this is set to some valid xml tag name then generated xml will contain this tagname after each subarray of two dimensional array
    
    public $append = false; //If true, then will append in the existing file rather than creating a new one(you must set $existingFilePath variable to the location of the existing file)
    public $existingFilePath; // Complete path of existing file including name to use in append operation
    public $operationType;
    public $operationCategory;
    public $postType;
    public $postMeta;
    public $customTaxonomies;
    public $exportPostRange;
    public $exportFeaturedImage;
    public $exportFileType;
    public $postStatus;
    public $sql;
    public $commentFields;
    public $commentStatus;
    public $orderBy;
    public $orderAscDesc;
    public $hideEmpty = false;
    public $read2lines = false;
    public $output = array();
    public $taxonomy;
    public $pluginName;
    public $postStartRange;
    public $postTotalCount;
    public $optionNoOfPost;
    public $userMeta;
    private $maxTimeCounter = 1;
    public $byPostId;
    
    
    function __construct()
    {
        iconv_set_encoding('input_encoding', 'UTF-8');
        $this->db = new DBModel();
    }
    /**
     * Main Convert function - It converts a given format ($from) to a specified format ($to).
     *
     * @param   string   $from              The name of the format, that needs to be converted 
     * @param   string   $to              The name of the format, to which given format($from) needs to be converted. 
     * @param   string   $inputSource       The name of the input file which needs to be converted.
     * @param   string   $from              The name of the output file after conversion.
     *
     */
    function convert($from, $to, $inputSource = "", $outputFileName = "")
    {
        if (!$this->checkValidImportOptions($from)) {
            $this->error = "Please select valid import options. See documentation for valid options";
            return false;
        }
        if (!$this->checkValidExportOptions($to)) {
            $this->error = "Please select valid export options. See documentation for valid options";
            return false;
        }
        
        set_time_limit(0);
        if ($this->operationType == "EXPORT") {
            switch (strtoupper($this->operationCategory)) {
                case "POST": 
                    $this->exportPosts();
                    break;
                case "PAGE":
                    $this->exportPosts();
                    break;
                case "CATEGORY":
                    $this->exportTaxonomies();
                    break;
                case "COMMENT":
                    $this->exportComments();
                    break;
                case "USER":
                    $this->exportUsers();
                    break;
                case "CUSTOMPOST":
                    $this->exportPosts();
                    break;
                case "WPTABLE":
                    $this->exportTable();
                    break;
                case "TAXONOMY":
                    $this->exportTaxonomies();
                    break;
                case "SQL":
                    $this->exportSQL();
                    break;
                case "PLUGINS":
                    $this->exportPlugin();
                    break;
                default:
                    break;
            }
        } else if ($this->operationType == "IMPORT") {
            $this->inputDataArray     = $this->getInputData($from, $inputSource, $outputFileName);
            $this->formattedDataArray = $this->formatInputData($to, $this->inputDataArray);
            switch (strtoupper($this->operationCategory)) {
                case "POST":
                    $this->importPosts();
                    break;
                case "PAGE":
                    $this->importPosts();
                    break;
                case "CATEGORY":
                    $this->importTaxonomies();
                    break;
                case "COMMENT":
                    $this->importComments();
                    break;
                case "USER":
                    $this->importUsers();
                    break;
                case "TAXONOMY":
                    $this->importTaxonomies();
                    break;
                case "CUSTOMPOST":
                    $this->importPosts();
                    break;
                case "WPTABLE":
                    $this->importTable();
                    break;
                case "PLUGINS":
                    $this->importPlugins();
                    break;
                default:
                    break;
            }
        }
    }
    
    function importPlugins()
    {
        switch (strtoupper($this->pluginName)) {
            case "WOOCOMMERCE_PRODUCT":
                $this->importPosts();
                break;
            default:
                break;
                
        }
    }
    
    function importTable()
    {
        return $this->arrayToDB($this->formattedDataArray);
    }
    
    function importUsers()
    {
        $recordsAdded = 0;
        $totalRows    = count($this->formattedDataArray);
        
        foreach ($this->formattedDataArray as $users) {
            $userData = array();
            $um       = array();
            
            foreach ($users as $key => $val) {
                if (strpos($key, "PM:") !== false) {
                    $key      = trim(substr($key, 4, strlen($key) - 1));
                    $um[$key] = $val;
                } else {
                    $userData[$key] = $val;
                }
            }
            
            if (isset($users["user_registered"]))
                $userData["user_registered"] = date('Y-m-d H:i:s', strtotime($users['user_registered']));
            else
                $userData['user_registered'] = date('Y-m-d H:i:s');
            
            $user = get_user_by('login', $userData["user_login"]);
            
            if ($user) {
                $userData["ID"] = $user->ID;
                if (isset($users["user_pass"]))
                    $userData["user_pass"] = wp_hash_password($users["user_pass"]);
                
                $userId = wp_update_user($userData);
            } else {
                if (isset($users["user_pass"]))
                    $userData["user_pass"] = wp_hash_password($users["user_pass"]);
                else
                    $userData["user_pass"] = wp_generate_password(12, false);
                
                $userId = wp_insert_user($userData);
            }
            
            $result = add_role(
                    $users['role'],
                    __( $users['role'] ),
                    array(
                        'read'         => true,  // true allows this capability
                        'edit_posts'   => true,
                        'delete_posts' => false, // Use false to explicitly deny
                    )
                );
                if ( null !== $result ) {
                    
                            $user_id = wp_update_user( array( 'ID' => $userId, 'role' => $users['role'] ) );

                            if ( is_wp_error( $user_id ) ) {
                                   
                            } else {
                                  
                            }	
                            
                }
                else {
                    
                }
            
            if (is_wp_error($userId)) {
                $this->db->addMessages(__("Error in adding/updating users: " . $userId->get_error_message()), "Import-User");
                unset($userData);
                continue;
            } else {
                $recordsAdded++;
                wp_new_user_notification($userId, $userData['user_pass']);
                foreach ($um as $key => $val) {
                    if (!empty($val)) {
                        update_user_meta($userId, $key, $val);
                    }
                }
            }
            
            unset($userData);
            unset($um);
        }
        unset($this->output);
        $this->output["recordsRead"]     = $totalRows;
        $this->output["recordsInserted"] = $recordsAdded;
        $this->output["recordsSkipped"]  = $totalRows - $recordsAdded;
    }
    
    function importComments()
    {
        $recordsAdded = 0;
        $totalRows    = count($this->formattedDataArray);
        foreach ($this->formattedDataArray as $comment) {
            $commentData = array();
            $cm          = array();
            foreach ($comment as $key => $val) {
                if (strpos($key, "PM:") !== false) {
                    $key      = trim(substr($key, 4, strlen($key) - 1));
                    $cm[$key] = $val;
                } else {
                    $commentData[$key] = $val;
                }
            }
            
            if (isset($comment["comment_date"]))
                $commentData["comment_date"] == date('Y-m-d H:i:s', strtotime($comment['comment_date']));
            else
                $commentData['comment_date'] = date('Y-m-d H:i:s');
            
            $commentId = wp_insert_comment($commentData);
            
            if ($commentId > 0)
                $recordsAdded++;
            
            foreach ($cm as $key => $val) {
                if (!empty($val)) {
                    add_comment_meta($commentId, $key, $val);
                }
            }
            
            unset($commentData);
            unset($cm);
        }
        unset($this->output);
        $this->output["recordsRead"]     = $totalRows;
        $this->output["recordsInserted"] = $recordsAdded;
        $this->output["recordsSkipped"]  = $totalRows - $recordsAdded;
    }
    
    function importTaxonomies()
    {
        $totalRows    = count($this->formattedDataArray);
        $recordsAdded = 0;
        $taxonomy     = $this->taxonomy;
        
        foreach ($this->formattedDataArray as $category) {
            $catData = array(
                'name' => ''
            );
            
            if (isset($category["name"]))
                $catData["name"] = $category["name"];
            
            if (isset($category["description"]))
                $catData["description"] = $category["description"];
            
            if (isset($category["parent"])) {
                if (is_numeric(trim($category["parent"]))) {
                    $catData["parent"] = $category["parent"];
                } else {
                    if (!empty($category["parent"])) {
                        $parent_term = term_exists($category["parent"], $taxonomy);
                        if ($parent_term !== 0 && $parent_term !== null)
                            $catData["parent"] = $parent_term['term_id'];
                        else
                            $this->db->addMessages(__("Parent terms doesn't exists "), "Parent-terms");
                    }
                }
            }
            
            if (isset($category["slug"])) {
                $catData["slug"] = str_replace(" ", "-", trim($category["slug"]));
            } else {
                $termname = get_term_by('name', $category["name"], $taxonomy);
                if ($termname) {
                    $catData["slug"] = $termname->slug;
                } else {
                    $catData["slug"] = str_replace(" ", "-", trim($category["name"]));
                }
            }
            
            $term = get_term_by('slug', $catData["slug"], $taxonomy);
            
            if ($term)
                $term = wp_update_term($term->term_id, $taxonomy, $catData);
            else
                $term = wp_insert_term($catData["name"], $taxonomy, $catData);
            
            if (is_wp_error($term)) {
                $this->db->addMessages(__("Error in adding/updating terms: " . $term->get_error_message()), "taxonomy-section");
                unset($catData);
                continue;
            } else {
                $recordsAdded++;
                $termId = $term['term_id'];
            }
            
            foreach ($category as $key => $val) {
                if (strpos($key, "PM:") !== false) {
                    $key = trim(substr($key, 4, strlen($key) - 1));
                    update_option("taxonomy_" . $termId . "_id", array(
                        $key => $val
                    ));
                }
            }
            
            unset($catData);
        }
        unset($this->output);
        $this->output["recordsRead"]     = $totalRows;
        $this->output["recordsInserted"] = $recordsAdded;
        $this->output["recordsSkipped"]  = $totalRows - $recordsAdded;
    }
    
    function importPosts()
    {
        global $wpdb;
        $totalRows         = count($this->formattedDataArray);
        $totalPostInserted = 0;
        $duplicatePosts    = 0;
        $option            = get_option('wpaieOptions');
        $catSeparator      = $option["categorySeparator"];
        $termSeparator     = $option["termSeparator"];
        
        foreach ($this->formattedDataArray as $postData) {
            $pm   = array();
            $ct   = array();
            $post = array(
                "post_title" => "",
                "post_content" => "",
                "post_author" => 1,
                "post_type" => $this->postType,
                "post_status" => $option["postStatus"]
            );
            
            $postId = $this->db->dbPostTitle($postData["post_title"], $this->postType);
            
            if ($option["duplicateEntry"] == "skip" && $postId > 0)
                continue;
            
            foreach ($postData as $key => $val) {
                if (strpos($key, "PM:") !== false) {
                    $key      = trim(substr($key, 4, strlen($key) - 1));
                    $pm[$key] = $val;
                } else if (strpos($key, "CT:") !== false) {
                    $key      = trim(substr($key, 4, strlen($key) - 1));
                    $ct[$key] = $val;
                } else if (strpos($key, "post_category") !== false) {
                    $cat[$key] = $val;
                } else {
                    $post[$key] = $val;
                }
            }
            
            if (isset($postData["post_author"])) {
                if (is_int($postData["post_author"]))
                    $post["post_author"] = $postData["post_author"];
                else {
                    $author = $this->db->dbCheckUser($postData["post_author"]);
                    if ($author > 0)
                        $post["post_author"] = $author;
                    else
                        $post["post_author"] = 1;
                }
            }
            
            if (isset($postData['post_date']))
                $post['post_date'] = date('Y-m-d H:i:s', strtotime($postData['post_date']));
            else if (!empty($option["dateval"]))
                $post['post_date'] = date('Y-m-d H:i:s', strtotime($option['dateval']));
            else
                $post['post_date'] = date('Y-m-d H:i:s');
            
            $post['post_date_gmt'] = get_gmt_from_date($post['post_date']);
            
            if ($postId > 0) {
                $post["ID"] = $postId;
                wp_update_post($post, $wp_error);
                
                foreach ($pm as $key => $val) {
                    if (!empty($val)) {
                        update_post_meta($postId, $key, $val);
                    }
                }
            } else {
                $postId = wp_insert_post($post, $wp_error);
                
                foreach ($pm as $key => $val) {
                    if (!empty($val)) {
                        add_post_meta($postId, $key, $val);
                    }
                }
            }
            
            if ($postId > 0)
                $totalPostInserted++;
            
            //Add post custom taxonomy
            foreach ($ct as $key => $val) {
                if (!empty($val)) {
                    $this->setTaxonomy($postId, $key, explode($termSeparator, $val));
                }
            }
            //Add post categories
            if (isset($cat["post_category"]) && !empty($cat["post_category"])) {
                $this->setTaxonomy($postId, 'category', explode($catSeparator, $cat["post_category"]));
            }
            //Add post tags
            if (isset($postData["post_tag"])) {
                if (!empty($postData["post_tag"]))
                    wp_set_post_tags($postId, $postData["post_tag"]);
            }
            //Add featured image
            if (isset($postData["featured_image"]) && !empty($postData["featured_image"])) {
                $this->addFeaturedImage($postData["featured_image"], $postId);
            }
            //Update post status if post_date is greater then current time
            if (strtotime($postData['post_date']) > time()) {
                $wpdb->update($wpdb->prefix . 'posts', array(
                    'post_status' => 'future'
                ), array(
                    'ID' => $postId
                ));
            }
            unset($post);
            unset($pm);
            unset($ct);
        }
        
        unset($this->output);
        $this->output["recordsRead"]     = $totalRows;
        $this->output["recordsInserted"] = $totalPostInserted;
        $this->output["recordsSkipped"]  = $totalRows - $totalPostInserted;
    }
    
    function setTaxonomy($postId, $taxonomy, array $fields)
    {
        $termIds = array();
        foreach ($fields as $field) {
            $field = trim($field);
            if (empty($field))
                continue;
            $content = explode(":", $field); //slug character needs to added here from option
            if (count($content) == 1) //no slug
                {
                $termname = get_term_by('name', $field, $taxonomy);
                if ($termname) {
                    $slug = $termname->slug;
                } else {
                    $slug = $field;
                }
                $parentId = 0;
            } else if (count($content) > 1) {
                $slug     = $content[0];
                $field    = $content[1];
                $parentId = 0;
            }
            
            $term = get_term_by('slug', $slug, $taxonomy);
            
            if ($term)
                $term = wp_update_term($term->term_id, $taxonomy, array(
                    'slug' => $slug,
                    'parent' => $parentId
                ));
            else
                $term = wp_insert_term($field, $taxonomy, array(
                    'slug' => $slug,
                    'parent' => $parentId
                ));
            
            if (is_wp_error($term))
                $this->db->addMessages(__("Error in adding/updating terms: " . $term->get_error_message()), "taxonomy-section");
            else
                $termIds[] = (int) $term['term_id'];
        }
        
        wp_set_object_terms($postId, $termIds, $taxonomy, FALSE);
        wp_cache_set('last_changed', time() - 1800, 'terms');
        wp_cache_delete('all_ids', $taxonomy);
        wp_cache_delete('get', $taxonomy);
        delete_option("{$taxonomy}_children");
        _get_term_hierarchy($taxonomy);
    }
    
    function addFeaturedImage($imageUrl, $postId)
    {
        $filename = substr($imageUrl, (strrpos($imageUrl, '/')) + 1);
        $uploads  = wp_upload_dir(current_time('mysql'));
        if (!is_dir($uploads['basedir'])) {
            return false;
        }
        
        // Generate unique file name
        $uniqueFileName = wp_unique_filename($uploads['path'], $filename);
        
        // Move the file to the uploads dir
        $newFile = $uploads['path'] . "/$uniqueFileName";
        
        $uploaded = copy($imageUrl, $newFile);
        
        // Get the file type. Must to use it as a post thumbnail.
        $wp_filetype = wp_check_filetype(basename($filename), null);
        
        extract($wp_filetype);
        // Compute the URL
        $url = $uploads['url'] . "/$uniqueFileName";
        
        // Construct the attachment array
        $attachment = array(
            'post_mime_type' => $type,
            'guid' => $url,
            'post_title' => $imageTitle,
            'post_content' => '',
            'post_status' => 'inherit'
        );
        
        $thumbId = wp_insert_attachment($attachment, $newFile, $postId);
        if (!is_wp_error($thumbId)) {
            require_once(ABSPATH . '/wp-admin/includes/image.php');
            wp_update_attachment_metadata($thumbId, wp_generate_attachment_metadata($thumbId, $newFile));
            update_attached_file($thumbId, $newFile);
            set_post_thumbnail($postId, $thumbId);
            return $thumbId;
        }
        
        return false;
    }
    
    function getPostMeta()
    {
        return $this->db->getPostMeta();
    }
    function getUserMeta()
    {
        return $this->db->getUserMeta();
    }
    
    function getCustomTaxonomies()
    {
        return $this->db->getCustomTaxonomies();
    }
    function getCustomPostType()
    {
        return $this->db->getCustomPostType();
    }
    
    function exportPlugin()
    {
        return $this->exportPosts();
    }
    
    function exportPosts()
    {
        global $wpdb;
        $query = "SELECT p.ID as post_id,";
        $post_id_selected = false;
        
        if($this->columns[0]=='ID'){
            array_shift($this->columns);
            $post_id_selected = true;
        }
        $cols  = implode(",", $this->columns);
        $query .= $cols . " ";
        //$query .= ",u.user_login ";
        
        if (count($this->postMeta) > 0) {
            foreach ($this->postMeta as $meta) {
                $query .= ',MAX(CASE WHEN pm.meta_key = "' . $meta . '" THEN pm.meta_value ELSE NULL END) as "' . $meta . '"';
            }
        }
        
        $query .= " FROM $wpdb->posts p LEFT JOIN $wpdb->postmeta pm ON ( pm.post_id = p.ID)";
        $query .= " LEFT JOIN $wpdb->users u ON ( p.post_author = u.ID ) ";
        $query .= " WHERE p.post_type = '$this->postType'";
        
        if (count($this->postStatus) > 0) {
            $postStatus = "";
            foreach ($this->postStatus as $status) {
                $postStatus .= "'" . $status . "',";
            }
            $postStatus = rtrim($postStatus, ",");
            $query .= " AND p.post_status IN ($postStatus)";
        } else {
            $query .= " AND p.post_status IN ('publish')";
        }
        
        $query .= " GROUP BY p.ID";
        
        if (!empty($this->orderBy)) {
            $query .= " ORDER BY ". $this->orderBy." ".$this->orderAscDesc;
        }
        
        if ($this->optionNoOfPost == "postrange") {
            $start = "0";
            $end   = "100";
            
            if (!empty($this->postStartRange))
                $start = $this->postStartRange;
            
            if (!empty($this->postTotalCount))
                $end = $this->postTotalCount;
            
            $query .= " LIMIT $start, $end";
        }
        
        if ($this->optionNoOfPost == "postrangebypostid") {
            $start = "0";
            $end   = "100";
            
             if (!empty($this->postStartRange))
                $start = $this->postStartRange;

            if (!empty($this->postEndRange))
                $end = $this->postEndRange;

            $query .= " AND p.id between ($start) and ($end)";
        }

        $posts = $this->db->dbExecuteQuery($query);
        if (count($this->customTaxonomies) > 0 || $this->exportFeaturedImage) {
            $postCount = 0;
            foreach ($posts as $post) {
                foreach ($this->customTaxonomies as $taxonomy) {
                    $posts[$postCount][$taxonomy] = $this->exportTaxonomy(wp_get_object_terms($post['post_id'], $taxonomy));
                }
                if ($this->exportFeaturedImage === "true") {   
                    $featured_img                      = wp_get_attachment_image_src(get_post_thumbnail_id($post['post_id']));
                    $posts[$postCount]["featured_img"] = "";
                    if (isset($featured_img[0]))
                        $posts[$postCount]["featured_img"] = $featured_img[0];
                }
                $postCount++;
            }
        }
        if(!$post_id_selected){          
            $postLoop = 0;
             foreach ($posts as $post) {
                 unset($posts[$postLoop]['post_id']);
                 $postLoop++;
             }
        }
        $this->export($posts);
    }
    
    function exportTaxonomies()
    {
        $exportTerms = array();
        $taxonomies  = $this->customTaxonomies;
        $args        = array(
            'hide_empty' => $this->hideEmpty === 'true' ? true : false
        );
        
        if (!empty($this->commentStatus))
            $args["status"] = $this->commentStatus;
        
        if (!empty($this->orderBy)) {
            $args["orderby"] = $this->orderBy;
            $args["order"]   = $this->orderAscDesc;
        }
        
        $terms = get_terms($taxonomies, $args);
        if (!empty($terms) && !is_wp_error($terms)) {
            foreach ($terms as $term) {
                $exportTerms[] = (array) $term;
            }
            
            $this->export($exportTerms);
            
        } else {
            $this->db->addMessages(__("Error in retriving terms: " . $terms->get_error_message()), "taxonomy-section");
        }
    }
    
    function exportComments()
    {
        $args = array();
        
        if (!empty($this->commentStatus))
            $args["status"] = $this->commentStatus;
        
        if (!empty($this->postAuthor))
            $args["post_author"] = $this->postAuthor;
        
        if (!empty($this->postStatus))
            $args["post_status"] = $this->postStatus;
        
        if (!empty($this->orderBy)) {
            $args["orderby"] = $this->orderBy;
            $args["order"]   = $this->orderAscDesc;
        }
        if (!empty($this->byPostId)) {
            $args["post_id"] = $this->byPostId;
        }
        
        $comments      = get_comments($args);
        $totalComments = 0;
        $commentCols   = array(
            "comment_ID",
            "comment_post_ID",
            "comment_author",
            "comment_author_email",
            "comment_author_url",
            "comment_author_IP",
            "comment_date",
            "comment_date_gmt",
            "comment_content",
            "comment_approved",
            "comment_type",
            "user_id",
            "comment_parent",
            "comment_agent",
            "comment_karma"
        );
        
        $exportComment = array();
        
        foreach ($comments as $comment) {                
                  
                    foreach($commentCols as $cols)
                    {
                        $newArr=(array)$comment; 
                        if(array_key_exists($cols,$newArr) && in_array($cols,$this->columns))
                             $exportComment[$totalComments][$cols]= $newArr[$cols];
                    }
                    $totalComments++;
                }        
        $this->export($exportComment);
    }
    
    function exportUsers()
    {   
        $args         = array(
            "fields" => $this->columns
        );
        $args["role"] = $this->userRole;
        
        if (!empty($this->orderBy)) {
            $args["orderby"] = $this->orderBy;
            $args["order"]   = $this->orderAscDesc;
        }
        
        $users       = get_users($args);
        
        $exportUsers = array();
        $userCount   = 0;
        
        foreach ($users as $user) {
            $user_info = get_userdata($user->ID);
            array_push($user,$user_info->roles[0]);
            $exportUsers[$userCount] = (array) $user;
            $exportUsers[$userCount]['user_role']=$user_info->roles[0];
            
            if (is_array($this->userMeta) && count($this->userMeta) > 0) {
                foreach ($this->userMeta as $meta) {
                    $exportUsers[$userCount][$meta] = get_user_meta($user->ID, $meta, true);
                }
            }
            
            $userCount++;
        }
                
        $this->export($exportUsers);
    }
    
    function exportSQL()
    {
        $result = $this->db->dbExecuteQuery(str_replace("\'", '"',$this->sql));
        $this->export($result);
    }
    
    function exportTable()
    {
        $orderBy = "";
        if (!empty($this->orderBy))
            $orderBy = " ORDER BY $this->orderBy $this->orderAscDesc";
        
        $this->sql = "SELECT * FROM $this->dbTableName" . $orderBy;
        $result    = $this->db->dbExecuteQuery($this->sql);
        $this->export($result);
        
    }
    
    function export($exportData)
    {
        unset($this->output);
        $this->output["recordsRead"] = count($exportData);
                
        if (count($exportData) > 0) {
            $header[]     = array_keys($exportData[0]);
            $header[0][0] = strtolower($header[0][0]);
            $exportData   = array_merge($header, $exportData);
            $this->exportFile($exportData);
        } else {
            $this->db->addMessages(__("There are no records found for selected options"), "Export-Message");
        }
    }
    
    function exportFile($posts)
    {
        switch (strtolower($this->exportFileType)) {
            case "csv":
                $this->arrayToCSV($posts, "file.csv");
                break;
            case "excel5":
                $this->excelFormat = "Excel5";
                $this->arrayToExcel($posts, "file.xls");
                break;
            case "excel2007":
                $this->excelFormat = "2007";
                $this->arrayToExcel($posts, "file.xlsx");
                break;
            case "pdf":
                $this->arrayToPDF($posts, "file.pdf");
                break;
            case "xml":
                $this->arrayToXML($posts, "file.xml");
                break;
            default:
                $this->db->messages = (_("Please select valid export file type", "Export File"));
                break;
        }
    }
    
    /**
     * Insert the data from two dimensional associative array to database using insert batch operation. Returns true 
     * if operation performed successfully
     * 
     * @param   array     $data             	Associative array with key as column name and value as table values.
     *
     */
    public function arrayToDB($data)
    {
        if (!is_array($data)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        $this->db->dbInsertBatch($this->dbTableName, $data);
        if ($this->db->rows_affected > 0) {
            $totalRows          = count($data);
            $this->db->messages = " Database insert operation done successfully";
            unset($this->output);
            $this->output["recordsRead"]     = $totalRows;
            $this->output["recordsInserted"] = $this->db->rows_affected;
            $this->output["recordsSkipped"]  = $totalRows - $this->db->rows_affected;
            return true;
        } else {
            $this->error = $this->db->error_info;
            return false;
        }
        return false;
    }
    
    /**
     * Generates the xml as output from the array provided. Returns true if operation performed successfully else return false
     * 
     * @param   array     $xmlArray             	Associative array with key as column name and value as table values.
     * @param   string    $outputFileName           Output xml file name
     *
     */
    public function arrayToXML($xmlArray, $outputFileName = "file.xml")
    {
        if (!is_array($xmlArray)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        $option            = get_option('wpaieOptions');
        $catSeparator      = $option["categorySeparator"];
        $this->rootElement = "POST";
        $xmlObject         = new SimpleXMLElement("<?xml version=\"1.0\" encoding=\"$this->encoding\" ?><$this->rootElement></$this->rootElement>");
        $this->generateXML($xmlArray, $xmlObject, $this->rootElement);
        $fileSavePath = $this->getWPUploadDir();
        $fileName     = time() . $outputFileName;
        
        $xmlObject->asXML($fileSavePath . "/" . $fileName);
        $upload_dir                   = wp_upload_dir();
        $this->output["downloadLink"] = $upload_dir['baseurl'] . "/" . $this->uploadDirectory . "/" . $fileName;
        return true;
    }
    
    /**
     * Generates the html table as output from the array provided.
     * 
     * @param   array     $htmlArray             	Associative array with key as column name and value as table values.
     * @param   array     $outputFileName           Output file name
     * @param   bool      $isCalledFromPDF          This function is used internally in arrayToPDF() also, to check whether it is called directly 			                                                    or using the pdf function 
     
     *
     */
    function arrayToHTML($htmlArray, $outputFileName = "file.html", $isCalledFromPDF = false)
    {
        if (!is_array($htmlArray)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        $table_output = '<table class="' . $this->tableCssClass . '" style="' . $this->htmlTableStyle . '">';
        $table_head   = "";
        if ($this->useFirstRowAsTag == true)
            $table_head = "<thead>";
        $table_body = '<tbody>';
        $loop_count = 0;
        
        foreach ($htmlArray as $k => $v) {
            if ($this->useFirstRowAsTag == true && $loop_count == 0)
                $table_head .= '<tr class="' . $this->trCssClass . '" style="' . $this->htmlTRStyle . '" id="row_' . $loop_count . '">';
            else
                $table_body .= '<tr class="' . $this->trCssClass . '" style="' . $this->htmlTRStyle . '" id="row_' . $loop_count . '">';
            
            foreach ($v as $col => $row) {
                if ($this->useFirstRowAsTag == true && $loop_count == 0)
                    $table_head .= '<th style="' . $this->htmlTDStyle . '">' . $row . '</th>';
                else
                    $table_body .= '<td style="' . $this->htmlTDStyle . '">' . $row . '</td>';
            }
            $table_body .= '</tr>';
            if ($this->useFirstRowAsTag == true && $loop_count == 0)
                $table_body .= '</tr></thead>';
            
            $loop_count++;
        }
        
        $table_body .= '</tbody>';
        $table_output     = $table_output . $table_head . $table_body . '</table>';
        $this->outputHTML = $table_output;
        if ($this->fileOutputMode == "save" && !$isCalledFromPDF) {
            if ($this->fileSavePath && !is_dir($this->fileSavePath))
                mkdir($this->fileSavePath);
            $fp = fopen($this->fileSavePath . $outputFileName, "w+");
            fwrite($fp, $this->outputHTML);
            fclose($fp);
        }
        
        return true;
    }
    
    /**
     * Generates the pdf as output from the array provided. Returns true if operation performed successfully else return false
     * 
     * @param   array     $pdfArray             	Associative array with key as column name and value as table values.
     * @param   string    $outputFileName           Output pdf file name
     *
     */
    
    function arrayToPDF($pdfArray, $outputFileName = "file.pdf")
    {
        if (!is_array($pdfArray)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        
        require_once(dirname(__FILE__) . "/library/tcpdf/tcpdf.php");
        $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
        $pdf->SetCreator(PDF_CREATOR);
        $pdf->SetFont($this->pdfFontName, $this->pdfFontWeight, $this->pdfFontSize, '', 'false');
        $pdf->SetAuthor($this->pdfAuthorName);
        $pdf->SetSubject($this->pdfSubject);
        $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
        $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
        if (@file_exists(dirname(__FILE__) . '/lang/eng.php')) {
            require_once(dirname(__FILE__) . '/lang/eng.php');
            $pdf->setLanguageArray($l);
        }
        $pdf->AddPage();
        $this->arrayToHTML($pdfArray, "file.html", true);
        $pdf->writeHTML($this->outputHTML, true, false, true, false, '');
        $fileSavePath = $this->getWPUploadDir();
        $fileName     = time() . $outputFileName;
        
        $pdf->Output($fileSavePath . "/" . $fileName, 'F');
        $upload_dir                   = wp_upload_dir();
        $this->output["downloadLink"] = $upload_dir['baseurl'] . "/" . $this->uploadDirectory . "/" . $fileName;
        return true;
    }
    
    /**
     * Generates the excel file as output from the array provided. 
     * 
     * @param   array     $excelArray             	Associative array with key as column name and value as table values.
     * @param   string    $outputFileName           Output excel file name
     *
     */
    
    function arrayToExcel($excelArray, $outputFileName = "file.xlsx")
    {
        if (!is_array($excelArray)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        if ($this->append && !isset($this->existingFilePath)) {
            $this->error = "Please provide existing file path, you want to append data ";
            
            return false;
        }
        if (empty($outputFileName)) {
            if ($this->excelFormat == "2007")
                $outputFileName = "file.xlsx";
            else
                $outputFileName = "file.xls";
        }
        require_once(dirname(__FILE__) . "/library/PHPExcel/PHPExcel.php");
        
        if ($this->append) {
            require_once(dirname(__FILE__) . "/library/PHPExcel/PHPExcel/IOFactory.php");
            if (!file_exists($this->existingFilePath)) {
                $this->error = "Could not open " . $this->existingFilePath . " for reading! File does not exist.";
                return false;
            }
            $objPHPExcel = PHPExcel_IOFactory::load($this->existingFilePath);
            
        } else {
            $objPHPExcel = new PHPExcel();
        }
        $objPHPExcel->setActiveSheetIndex(0);
        
        $cells    = array(
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "J",
            "K",
            "L",
            "M",
            "N",
            "O",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "U",
            "V",
            "W",
            "X",
            "Y",
            "Z"
        );
        $colCount = 1;
        
        if ($this->append)
            $colCount = $objPHPExcel->getActiveSheet()->getHighestRow() + 1;
        
        foreach ($excelArray as $rows) {
            $cellLoop = 0;
            foreach ($rows as $row) {
                $objPHPExcel->getActiveSheet()->setCellValue($cells[$cellLoop] . $colCount, $row);
                $cellLoop++;
            }
            $colCount++;
        }
        if ($this->excelFormat == "2007") {
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        } else {
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        }
        if ($this->append) {
            $objWriter->save($this->existingFilePath);
        } else {
            $fileSavePath = $this->getWPUploadDir();
            $fileName     = time() . $outputFileName;
            $objWriter->save($fileSavePath . "/" . $fileName);
            $upload_dir                   = wp_upload_dir();
            $this->output["downloadLink"] = $upload_dir['baseurl'] . "/" . $this->uploadDirectory . "/" . $fileName;
        }
        
        return true;
    }
    
    /**
     * Generates the csv file as output from the array provided. 
     * Returns true if operation performed successfully else return false.
     * 
     * @param   array     $csvArray             	Associative array with key as column name and value as table values.
     * @param   string    $outputFileName           Output csv file name
     *
     */
    function arrayToCSV($csvArray, $fileName = "file.csv")
    {
       
        if (!is_array($csvArray)) {
            $this->error = "Please provide valid input. ";
            return false;
        }
        if (!$fileName) {
            $this->error = "Please provide the csv file name";
            return false;
        }
        if ($this->append && !isset($this->existingFilePath)) {
            $this->error = "Please provide existing file path, you want to append data ";
            return false;
        }
        $list         = $csvArray;
        $fileSavePath = $this->getWPUploadDir();
        $fileName     = time() . $fileName;
        $fp           = fopen($fileSavePath . "/" . $fileName, 'w');
        
        foreach ($list as $fields) {
            fputcsv($fp, $fields, $this->delimiter, $this->enclosure);
        }
        $upload_dir                   = wp_upload_dir();
        $this->output["downloadLink"] = $upload_dir['baseurl'] . "/" . $this->uploadDirectory . "/" . $fileName;
        fclose($fp);
        return true;
    }
    
    /**
     * Read an excel file and return content as array
     * @param   string  $fileName            excel file name
     *
     * return   array                        return array 
     */
    
    function excelToArray($fileName)
    {
        if (!$fileName) {
            $this->error = "Please provide the excel file name";
            return false;
        }
        require_once(dirname(__FILE__) . "/library/PHPExcel/PHPExcel/IOFactory.php");
        $objPHPExcel = PHPExcel_IOFactory::load($fileName);
        return $objPHPExcel->getActiveSheet()->toArray(null, true, true, false);
    }
    
    /**
     * Read an xml file/xml and return content as array
     * @param   string  $xmlSource            xml as string or xml file name
     *
     * return   array                        return array 
     */
    
    function xmlToArray($xmlSource)
    {
        if ($this->isFile)
            $xml = file_get_contents($xmlSource);
        else
            $xml = $xmlSource;
        
        $xmlObject = new SimpleXMLElement($xml);
        return @json_decode(@json_encode($xmlObject), 1);
    }
    
    /**
     * Read a CSV File and return content as an array.
     * @param   string $fileName       				 Path of file with file name (default is 'file.csv')
     *
     * return   array                                return content array
     */
    function csvToArray($fileName)
    {
        if (!$fileName) {
            $this->error = "Please provide the csv file name";
            return false;
        }
        
        ini_set('auto_detect_line_endings', TRUE);
        $option = get_option('wpaieOptions');
        
        if (!empty($option["csvDelimiter"]))
            $this->delimiter = $option["csvDelimiter"];
        $csvArray = array();
        
        if (($handle = fopen($fileName, "r")) !== FALSE) {
            $arrayIndex1 = 0;
            while (($lineArray = fgetcsv($handle, 0, $this->delimiter)) !== FALSE) {
                for ($arrayIndex2 = 0; $arrayIndex2 < count($lineArray); $arrayIndex2++) {
                    $csvArray[$arrayIndex1][$arrayIndex2] = $lineArray[$arrayIndex2];
                }
                $arrayIndex1++;
                if ($this->read2lines && $arrayIndex1 == 2)
                    break;
            }
            fclose($handle);
        }
        return $csvArray;
    }
    
    /**
     * Read an html file/html and return content as array
     * @param   string  $html               	 html as string or xml file name
     *
     * return   array                        	 return array 
     */
    
    function htmlToArray($htmlContent)
    {
        $dom = new DOMDocument();
        if ($this->isFile)
            $htmlContent = file_get_contents($htmlContent);
        
        $html                    = $dom->loadHTML($htmlContent);
        $dom->preserveWhiteSpace = false;
        $tables                  = $dom->getElementsByTagName('table');
        $rows                    = $tables->item(0)->getElementsByTagName('tr');
        $cols                    = $rows->item(0)->getElementsByTagName('th');
        $row_headers             = NULL;
        foreach ($cols as $node) {
            $row_headers[] = $node->nodeValue;
        }
        $data = array();
        $rows = $tables->item(0)->getElementsByTagName('tr');
        foreach ($rows as $row) {
            $cols = $row->getElementsByTagName('td');
            $row  = array();
            $loop = 0;
            foreach ($cols as $node) {
                if ($row_headers == NULL)
                    $row[] = $node->nodeValue;
                else
                    $row[$row_headers[$loop]] = $node->nodeValue;
                $loop++;
            }
            $data[] = $row;
        }
        
        return $data;
    }
    
    /**
     * Retrives all the tables from database
     *
     * return   array             table names in array
     */
    
    function getDBTables()
    {
        $tables   = $this->db->dbGetTableName();
        $dbtables = array();
        foreach ($tables as $table) {
            $key        = array_keys($table);
            $dbtables[] = $table[$key[0]];
        }
        return $dbtables;
    }
    
    /**
     * Retrives the column names from a given table
     * @param   string  $table    The name of the table to get columns.
     *
     * return   array             column name in array
     */
    
    function getDBTableColumns($dbTableName)
    {
        $columns = $this->db->dbGetColumnName($dbTableName);
        $col     = array();
        foreach ($columns as $column) {
            $col[] = $column["Field"];
        }
        return $col;
    }
    
    function fileUpload($fileObject, $fileUploadPath = "", $maxSize = 100000, $allowedFileTypes = array())
    {
        if ($this->checkValidFileUpload($fileObject, $fileUploadPath, $maxSize, $allowedFileTypes)) {
            if (!is_dir($fileUploadPath) && $fileUploadPath) {
                mkdir($fileUploadPath);
            }
            if (!$this->uploadedFileName)
                $this->uploadedFileName = $fileUploadPath . $fileObject["name"];
            if (move_uploaded_file($fileObject["tmp_name"], $this->uploadedFileName)) {
                $this->messages = "File uploaded successfully.";
                return true;
            } else {
                $this->error = "Some error occured in file upload. Please check error. Error code: " . $fileObject['error'];
                return false;
            }
        }
        
        return false;
    }
    /*----------------------------------------------------------- Internal Functions --------------------------------------*/
    
    private function getInputData($from, $inputSource = "", $outputFileName = "")
    {
        $data = array();
        
        switch ($from) {
            case "db":
                $data = $this->db->dbSelect($this->dbTableName, $this->columns);
                break;
            case "excel":
                $data = $this->excelToArray($inputSource);
                break;
            case "html":
                $data = $this->htmlToArray($inputSource);
                break;
            case "xml":
                $data = $this->xmlToArray($inputSource);
                break;
            case "csv":
                $data = $this->csvToArray($inputSource);
                break;
            case "sql":
                $data = $this->db->dbExecuteQuery($inputSource);
                break;
            default:
                $this->error = "Please enter valid format";
                break;
                
        }
        $this->messages .= " Data exported successfully";
        return $data;
    }
    
    public function formatInputData($type, $content)
    {
        $rows     = 0;
        $startRow = 0;
        $data     = array();
        
        if ($this->isFirstRowHeader)
            $startRow = 1;
        
        $content = $this->array_values_recursive($content);
        $content = $this->getTwoDimensionalArray($content);
        
        if (count($this->columns) == 0) {
            $this->columns = $this->getColumns($content, $type);
        }
        
        for ($rows = $startRow; $rows < count($content); $rows++) {
            for ($csvColLoop = 0; $csvColLoop < count($this->columns); $csvColLoop++) {
                $array[$this->columns[$csvColLoop]] = $content[$rows][$csvColLoop];
            }
            if ($this->rowTagName && $to = 'xml')
                $data[][$this->rowTagName] = $array;
            else
                $data[] = $array;
        }
        return $data;
    }
    
    function array_values_recursive($array)
    {
        $array = array_values($array);
        for ($loop = 0; $loop < count($array); $loop++) {
            $element = $array[$loop];
            if (is_array($element)) {
                $array[$loop] = $this->array_values_recursive($element);
            }
        }
        return $array;
    }
    
    function getColumnName($table)
    {
        return $this->db->dbGetColumnName($table);
    }
    
    private function checkValidFileUpload($fileObject, $fileUploadPath, $maxSize, $allowedFileTypes)
    {
        if (count($allowedFileTypes) > 0) {
            $fileExtensionLowerCase = strtolower($this->getFileExtension($fileObject['name']));
            $fileExtensionUpperCase = strtoupper($this->getFileExtension($fileObject['name']));
            if (!in_array($fileExtensionLowerCase, $allowedFileTypes) && !in_array($fileExtensionUpperCase, $allowedFileTypes)) {
                $this->error = "Invalid file type";
                return false;
            }
        }
        
        if ($fileObject["size"] == 0) {
            $this->error = "File size is 0 bytes. Please upload a valid file";
            return false;
        }
        
        if ($fileObject["size"] > $maxSize) {
            $this->error = "File size is greater than max. file size allowed";
            return false;
        }
        
        if ($fileObject["size"] > $this->getBytes(ini_get('upload_max_filesize'))) {
            $this->error = "File size is greater than max. file size allowed in INI File";
            return false;
        }
        
        if ($fileObject["error"] > 0) {
            $this->error = "There is some error occured. Please check error. Error code: " . $fileObject["error"];
            return false;
        }
        
        if (file_exists($fileUploadPath . $fileObject["name"]) && !$this->replaceOlderFile) {
            $this->error = $fileObject["name"] . " already exists. ";
            return false;
        }
        
        if (!preg_match("`^[-0-9A-Z_\. ]+$`i", $fileObject["name"]) && $this->checkFileName) {
            $this->error = $fileObject["name"] . " contains illegal character in name.";
            return false;
        }
        
        if (!mb_strlen($fileObject["name"], "UTF-8") > 225 && $this->checkFileNameCharacters) {
            $this->error = $fileObject["name"] . " must be less than 225 characters";
            return false;
        }
        
        return true;
    }
    public function getFileExtension($fileName)
    {
        return pathinfo($fileName, PATHINFO_EXTENSION);
    }
    
    private function getBytes($sizeStr)
    {
        switch (substr($sizeStr, -1)) {
            case 'M':
            case 'm':
                return (int) $sizeStr * 1048576;
            case 'K':
            case 'k':
                return (int) $sizeStr * 1024;
            case 'G':
            case 'g':
                return (int) $sizeStr * 1073741824;
            default:
                return $sizeStr;
        }
    }
    private function generateXML($xmlArray, &$xmlObject, $rootElement = "root")
    {
        foreach ($xmlArray as $key => $value) {            
            if (is_array($value)) {
               $obj = $xmlObject->addChild("items");
                if (!is_numeric($key)) {
                    $subnode = $obj->addChild("$key");
                    $this->generateXML($value, $subnode, $rootElement);
                } else {
                    $this->generateXML($value, $obj, $rootElement);                    
                }
            } else {
                if (is_numeric($key)) {
                    $key = $value;
                }
                $xmlObject->addChild("$key", "$value");
            }
        }
    }
    private function checkValidExportOptions($to)
    {
        switch ($to) {
            case "db":
                return true;
            case "html":
                return true;
            case "xml":
                return true;
            case "array":
                return true;
            case "excel":
                return true;
            case "csv":
                return true;
            case "pdf":
                return true;
        }
        return false;
        
    }
    
    private function checkValidImportOptions($from)
    {
        switch ($from) {
            case "db":
                return true;
            case "html":
                return true;
            case "xml":
                return true;
            case "array":
                return true;
            case "excel5":
                return true;
            case "excel2007":
                return true;
            case "csv":
                return true;
            case "sql":
                return true;
            case "pdf":
                return true;
        }
        return false;
    }
    
    private function processOutput($to, $data, $outputFileName = "")
    {
        switch ($to) {
            case "db":
                return $this->arrayToDB($data);
            case "xml":
                return $this->arrayToXML($data, $outputFileName);
            case "html":
                return $this->arrayToHTML($data, $outputFileName);
            case "pdf":
                return $this->arrayToPDF($data, $outputFileName);
            case "excel":
                return $this->arrayToExcel($data, $outputFileName);
            case "csv":
                return $this->arrayToCSV($data, $outputFileName);
        }
        return false;
    }
    
    private function getColumns($content, $type)
    {
        foreach ($content[0] as $columns) {
            if (is_array($columns)) {
                return $this->getColumns($content[0]);
            }
            
            if ($type == "xml")
                $cols[] = str_replace(" ", "-", trim($columns));
            else
                $cols[] = $columns;
        }
        return $cols;
    }
    
    private function isMulti($array)
    {
        return (count($array) != count($array, COUNT_RECURSIVE));
    }
    
    private function exportTaxonomy(array $items)
    {
        $output = array();
        foreach ($items as $item) {
            $text = "{$item->slug}:{$item->name}";
            if ($item->parent) {
                $parent = get_term($item->parent, $item->taxonomy);
                $text   = $parent->slug . '~' . $text;
            }
            
            $output[] = $text;
        }
        
        return implode(',', $output);
    }
    
    private function getTwoDimensionalArray($content)
    {
        if ($this->isMulti($content[0])) {
            $content = $content[0];
            return $this->getTwoDimensionalArray($content);
        } else {
            return $content;
        }
    }
    private function getWPUploadDir()
    {
        $upload_dir   = wp_upload_dir();
        $fileSavePath = $upload_dir['basedir'] . "/" . $this->uploadDirectory;
        
        if (!is_dir($fileSavePath))
            wp_mkdir_p($fileSavePath);
        
        return $fileSavePath;
    }
    
} //end of class
?>